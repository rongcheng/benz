//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.239 版自动生成。
// 
#pragma warning disable 1591

namespace QJVRMS.Business.ImageStorageWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImageStorageServiceSoap", Namespace="http://qjDataAccess.org/")]
    public partial class ImageStorageService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PutImageFromClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddImageStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateImageStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteImageStorageOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddImageToCatalogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageByAuthAndNumOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageInfoByAuthAndIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageInfoByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDownMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDownLoadMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDownloadMessageByLoginNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserByAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageCatalogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLightBoxListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelItemFromLightBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImageStaticOperationCompleted;
        
        private System.Threading.SendOrPostCallback Production_Hires_Down_LogOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ImageStorageService() {
            this.Url = global::QJVRMS.Business.Properties.Settings.Default.QJVRMS_Business_ImageStorageWS_ImageStorageService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PutImageFromClientCompletedEventHandler PutImageFromClientCompleted;
        
        /// <remarks/>
        public event AddImageStorageCompletedEventHandler AddImageStorageCompleted;
        
        /// <remarks/>
        public event UpdateImageStorageCompletedEventHandler UpdateImageStorageCompleted;
        
        /// <remarks/>
        public event AddAttachCompletedEventHandler AddAttachCompleted;
        
        /// <remarks/>
        public event DeleteAttachCompletedEventHandler DeleteAttachCompleted;
        
        /// <remarks/>
        public event GetAttachListCompletedEventHandler GetAttachListCompleted;
        
        /// <remarks/>
        public event DeleteImageStorageCompletedEventHandler DeleteImageStorageCompleted;
        
        /// <remarks/>
        public event AddImageToCatalogCompletedEventHandler AddImageToCatalogCompleted;
        
        /// <remarks/>
        public event GetImageByAuthAndNumCompletedEventHandler GetImageByAuthAndNumCompleted;
        
        /// <remarks/>
        public event GetImageInfoByAuthAndIdCompletedEventHandler GetImageInfoByAuthAndIdCompleted;
        
        /// <remarks/>
        public event GetImageInfoByIdCompletedEventHandler GetImageInfoByIdCompleted;
        
        /// <remarks/>
        public event DeleteDownMessageCompletedEventHandler DeleteDownMessageCompleted;
        
        /// <remarks/>
        public event GetDownLoadMessageCompletedEventHandler GetDownLoadMessageCompleted;
        
        /// <remarks/>
        public event GetDownloadMessageByLoginNameCompletedEventHandler GetDownloadMessageByLoginNameCompleted;
        
        /// <remarks/>
        public event GetUserByAllCompletedEventHandler GetUserByAllCompleted;
        
        /// <remarks/>
        public event GetImageCatalogCompletedEventHandler GetImageCatalogCompleted;
        
        /// <remarks/>
        public event GetLightBoxListCompletedEventHandler GetLightBoxListCompleted;
        
        /// <remarks/>
        public event DelItemFromLightBoxCompletedEventHandler DelItemFromLightBoxCompleted;
        
        /// <remarks/>
        public event GetImageStaticCompletedEventHandler GetImageStaticCompleted;
        
        /// <remarks/>
        public event Production_Hires_Down_LogCompletedEventHandler Production_Hires_Down_LogCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/PutImageFromClient", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PutImageFromClient(string log) {
            this.Invoke("PutImageFromClient", new object[] {
                        log});
        }
        
        /// <remarks/>
        public void PutImageFromClientAsync(string log) {
            this.PutImageFromClientAsync(log, null);
        }
        
        /// <remarks/>
        public void PutImageFromClientAsync(string log, object userState) {
            if ((this.PutImageFromClientOperationCompleted == null)) {
                this.PutImageFromClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutImageFromClientOperationCompleted);
            }
            this.InvokeAsync("PutImageFromClient", new object[] {
                        log}, this.PutImageFromClientOperationCompleted, userState);
        }
        
        private void OnPutImageFromClientOperationCompleted(object arg) {
            if ((this.PutImageFromClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutImageFromClientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/AddImageStorage", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddImageStorage(
                    System.Guid userId, 
                    string fileName, 
                    string folderName, 
                    string caption, 
                    string address, 
                    string character, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime shotDate, 
                    string keywords, 
                    string desc, 
                    string imageType, 
                    string hvsp, 
                    System.Guid itemId, 
                    string serNum, 
                    System.Guid groupId) {
            object[] results = this.Invoke("AddImageStorage", new object[] {
                        userId,
                        fileName,
                        folderName,
                        caption,
                        address,
                        character,
                        startDate,
                        endDate,
                        shotDate,
                        keywords,
                        desc,
                        imageType,
                        hvsp,
                        itemId,
                        serNum,
                        groupId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddImageStorageAsync(
                    System.Guid userId, 
                    string fileName, 
                    string folderName, 
                    string caption, 
                    string address, 
                    string character, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime shotDate, 
                    string keywords, 
                    string desc, 
                    string imageType, 
                    string hvsp, 
                    System.Guid itemId, 
                    string serNum, 
                    System.Guid groupId) {
            this.AddImageStorageAsync(userId, fileName, folderName, caption, address, character, startDate, endDate, shotDate, keywords, desc, imageType, hvsp, itemId, serNum, groupId, null);
        }
        
        /// <remarks/>
        public void AddImageStorageAsync(
                    System.Guid userId, 
                    string fileName, 
                    string folderName, 
                    string caption, 
                    string address, 
                    string character, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    System.DateTime shotDate, 
                    string keywords, 
                    string desc, 
                    string imageType, 
                    string hvsp, 
                    System.Guid itemId, 
                    string serNum, 
                    System.Guid groupId, 
                    object userState) {
            if ((this.AddImageStorageOperationCompleted == null)) {
                this.AddImageStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImageStorageOperationCompleted);
            }
            this.InvokeAsync("AddImageStorage", new object[] {
                        userId,
                        fileName,
                        folderName,
                        caption,
                        address,
                        character,
                        startDate,
                        endDate,
                        shotDate,
                        keywords,
                        desc,
                        imageType,
                        hvsp,
                        itemId,
                        serNum,
                        groupId}, this.AddImageStorageOperationCompleted, userState);
        }
        
        private void OnAddImageStorageOperationCompleted(object arg) {
            if ((this.AddImageStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImageStorageCompleted(this, new AddImageStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/UpdateImageStorage", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateImageStorage(System.Guid itemId, string caption, string address, string character, System.DateTime startDate, System.DateTime endDate, System.DateTime shotDate, string keywords, string desc) {
            object[] results = this.Invoke("UpdateImageStorage", new object[] {
                        itemId,
                        caption,
                        address,
                        character,
                        startDate,
                        endDate,
                        shotDate,
                        keywords,
                        desc});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateImageStorageAsync(System.Guid itemId, string caption, string address, string character, System.DateTime startDate, System.DateTime endDate, System.DateTime shotDate, string keywords, string desc) {
            this.UpdateImageStorageAsync(itemId, caption, address, character, startDate, endDate, shotDate, keywords, desc, null);
        }
        
        /// <remarks/>
        public void UpdateImageStorageAsync(System.Guid itemId, string caption, string address, string character, System.DateTime startDate, System.DateTime endDate, System.DateTime shotDate, string keywords, string desc, object userState) {
            if ((this.UpdateImageStorageOperationCompleted == null)) {
                this.UpdateImageStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateImageStorageOperationCompleted);
            }
            this.InvokeAsync("UpdateImageStorage", new object[] {
                        itemId,
                        caption,
                        address,
                        character,
                        startDate,
                        endDate,
                        shotDate,
                        keywords,
                        desc}, this.UpdateImageStorageOperationCompleted, userState);
        }
        
        private void OnUpdateImageStorageOperationCompleted(object arg) {
            if ((this.UpdateImageStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateImageStorageCompleted(this, new UpdateImageStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/AddAttach", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAttach(System.Guid itemId, string fileName) {
            object[] results = this.Invoke("AddAttach", new object[] {
                        itemId,
                        fileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachAsync(System.Guid itemId, string fileName) {
            this.AddAttachAsync(itemId, fileName, null);
        }
        
        /// <remarks/>
        public void AddAttachAsync(System.Guid itemId, string fileName, object userState) {
            if ((this.AddAttachOperationCompleted == null)) {
                this.AddAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachOperationCompleted);
            }
            this.InvokeAsync("AddAttach", new object[] {
                        itemId,
                        fileName}, this.AddAttachOperationCompleted, userState);
        }
        
        private void OnAddAttachOperationCompleted(object arg) {
            if ((this.AddAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachCompleted(this, new AddAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/DeleteAttach", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAttach(System.Guid attId) {
            this.Invoke("DeleteAttach", new object[] {
                        attId});
        }
        
        /// <remarks/>
        public void DeleteAttachAsync(System.Guid attId) {
            this.DeleteAttachAsync(attId, null);
        }
        
        /// <remarks/>
        public void DeleteAttachAsync(System.Guid attId, object userState) {
            if ((this.DeleteAttachOperationCompleted == null)) {
                this.DeleteAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAttachOperationCompleted);
            }
            this.InvokeAsync("DeleteAttach", new object[] {
                        attId}, this.DeleteAttachOperationCompleted, userState);
        }
        
        private void OnDeleteAttachOperationCompleted(object arg) {
            if ((this.DeleteAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAttachCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetAttachList", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetAttachList(System.Guid itemId) {
            object[] results = this.Invoke("GetAttachList", new object[] {
                        itemId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachListAsync(System.Guid itemId) {
            this.GetAttachListAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetAttachListAsync(System.Guid itemId, object userState) {
            if ((this.GetAttachListOperationCompleted == null)) {
                this.GetAttachListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachListOperationCompleted);
            }
            this.InvokeAsync("GetAttachList", new object[] {
                        itemId}, this.GetAttachListOperationCompleted, userState);
        }
        
        private void OnGetAttachListOperationCompleted(object arg) {
            if ((this.GetAttachListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachListCompleted(this, new GetAttachListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/DeleteImageStorage", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteImageStorage(System.Guid itemId) {
            object[] results = this.Invoke("DeleteImageStorage", new object[] {
                        itemId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteImageStorageAsync(System.Guid itemId) {
            this.DeleteImageStorageAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DeleteImageStorageAsync(System.Guid itemId, object userState) {
            if ((this.DeleteImageStorageOperationCompleted == null)) {
                this.DeleteImageStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteImageStorageOperationCompleted);
            }
            this.InvokeAsync("DeleteImageStorage", new object[] {
                        itemId}, this.DeleteImageStorageOperationCompleted, userState);
        }
        
        private void OnDeleteImageStorageOperationCompleted(object arg) {
            if ((this.DeleteImageStorageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteImageStorageCompleted(this, new DeleteImageStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/AddImageToCatalog", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddImageToCatalog(System.Guid[] catalogId, System.Guid itemId) {
            object[] results = this.Invoke("AddImageToCatalog", new object[] {
                        catalogId,
                        itemId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddImageToCatalogAsync(System.Guid[] catalogId, System.Guid itemId) {
            this.AddImageToCatalogAsync(catalogId, itemId, null);
        }
        
        /// <remarks/>
        public void AddImageToCatalogAsync(System.Guid[] catalogId, System.Guid itemId, object userState) {
            if ((this.AddImageToCatalogOperationCompleted == null)) {
                this.AddImageToCatalogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImageToCatalogOperationCompleted);
            }
            this.InvokeAsync("AddImageToCatalog", new object[] {
                        catalogId,
                        itemId}, this.AddImageToCatalogOperationCompleted, userState);
        }
        
        private void OnAddImageToCatalogOperationCompleted(object arg) {
            if ((this.AddImageToCatalogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImageToCatalogCompleted(this, new AddImageToCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetImageByAuthAndNum", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetImageByAuthAndNum(string imageNum, System.Guid userId) {
            object[] results = this.Invoke("GetImageByAuthAndNum", new object[] {
                        imageNum,
                        userId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageByAuthAndNumAsync(string imageNum, System.Guid userId) {
            this.GetImageByAuthAndNumAsync(imageNum, userId, null);
        }
        
        /// <remarks/>
        public void GetImageByAuthAndNumAsync(string imageNum, System.Guid userId, object userState) {
            if ((this.GetImageByAuthAndNumOperationCompleted == null)) {
                this.GetImageByAuthAndNumOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageByAuthAndNumOperationCompleted);
            }
            this.InvokeAsync("GetImageByAuthAndNum", new object[] {
                        imageNum,
                        userId}, this.GetImageByAuthAndNumOperationCompleted, userState);
        }
        
        private void OnGetImageByAuthAndNumOperationCompleted(object arg) {
            if ((this.GetImageByAuthAndNumCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageByAuthAndNumCompleted(this, new GetImageByAuthAndNumCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetImageInfoByAuthAndId", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetImageInfoByAuthAndId(System.Guid itemId, System.Guid userId) {
            object[] results = this.Invoke("GetImageInfoByAuthAndId", new object[] {
                        itemId,
                        userId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageInfoByAuthAndIdAsync(System.Guid itemId, System.Guid userId) {
            this.GetImageInfoByAuthAndIdAsync(itemId, userId, null);
        }
        
        /// <remarks/>
        public void GetImageInfoByAuthAndIdAsync(System.Guid itemId, System.Guid userId, object userState) {
            if ((this.GetImageInfoByAuthAndIdOperationCompleted == null)) {
                this.GetImageInfoByAuthAndIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageInfoByAuthAndIdOperationCompleted);
            }
            this.InvokeAsync("GetImageInfoByAuthAndId", new object[] {
                        itemId,
                        userId}, this.GetImageInfoByAuthAndIdOperationCompleted, userState);
        }
        
        private void OnGetImageInfoByAuthAndIdOperationCompleted(object arg) {
            if ((this.GetImageInfoByAuthAndIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageInfoByAuthAndIdCompleted(this, new GetImageInfoByAuthAndIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetImageInfoById", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetImageInfoById(System.Guid itemId) {
            object[] results = this.Invoke("GetImageInfoById", new object[] {
                        itemId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageInfoByIdAsync(System.Guid itemId) {
            this.GetImageInfoByIdAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetImageInfoByIdAsync(System.Guid itemId, object userState) {
            if ((this.GetImageInfoByIdOperationCompleted == null)) {
                this.GetImageInfoByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageInfoByIdOperationCompleted);
            }
            this.InvokeAsync("GetImageInfoById", new object[] {
                        itemId}, this.GetImageInfoByIdOperationCompleted, userState);
        }
        
        private void OnGetImageInfoByIdOperationCompleted(object arg) {
            if ((this.GetImageInfoByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageInfoByIdCompleted(this, new GetImageInfoByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/DeleteDownMessage", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteDownMessage(int logId) {
            object[] results = this.Invoke("DeleteDownMessage", new object[] {
                        logId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDownMessageAsync(int logId) {
            this.DeleteDownMessageAsync(logId, null);
        }
        
        /// <remarks/>
        public void DeleteDownMessageAsync(int logId, object userState) {
            if ((this.DeleteDownMessageOperationCompleted == null)) {
                this.DeleteDownMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDownMessageOperationCompleted);
            }
            this.InvokeAsync("DeleteDownMessage", new object[] {
                        logId}, this.DeleteDownMessageOperationCompleted, userState);
        }
        
        private void OnDeleteDownMessageOperationCompleted(object arg) {
            if ((this.DeleteDownMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDownMessageCompleted(this, new DeleteDownMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetDownLoadMessage", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDownLoadMessage(string username, System.DateTime beginDate, System.DateTime endDate) {
            object[] results = this.Invoke("GetDownLoadMessage", new object[] {
                        username,
                        beginDate,
                        endDate});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDownLoadMessageAsync(string username, System.DateTime beginDate, System.DateTime endDate) {
            this.GetDownLoadMessageAsync(username, beginDate, endDate, null);
        }
        
        /// <remarks/>
        public void GetDownLoadMessageAsync(string username, System.DateTime beginDate, System.DateTime endDate, object userState) {
            if ((this.GetDownLoadMessageOperationCompleted == null)) {
                this.GetDownLoadMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownLoadMessageOperationCompleted);
            }
            this.InvokeAsync("GetDownLoadMessage", new object[] {
                        username,
                        beginDate,
                        endDate}, this.GetDownLoadMessageOperationCompleted, userState);
        }
        
        private void OnGetDownLoadMessageOperationCompleted(object arg) {
            if ((this.GetDownLoadMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownLoadMessageCompleted(this, new GetDownLoadMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetDownloadMessageByLoginName", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDownloadMessageByLoginName(string username) {
            object[] results = this.Invoke("GetDownloadMessageByLoginName", new object[] {
                        username});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDownloadMessageByLoginNameAsync(string username) {
            this.GetDownloadMessageByLoginNameAsync(username, null);
        }
        
        /// <remarks/>
        public void GetDownloadMessageByLoginNameAsync(string username, object userState) {
            if ((this.GetDownloadMessageByLoginNameOperationCompleted == null)) {
                this.GetDownloadMessageByLoginNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownloadMessageByLoginNameOperationCompleted);
            }
            this.InvokeAsync("GetDownloadMessageByLoginName", new object[] {
                        username}, this.GetDownloadMessageByLoginNameOperationCompleted, userState);
        }
        
        private void OnGetDownloadMessageByLoginNameOperationCompleted(object arg) {
            if ((this.GetDownloadMessageByLoginNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownloadMessageByLoginNameCompleted(this, new GetDownloadMessageByLoginNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetUserByAll", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUserByAll() {
            object[] results = this.Invoke("GetUserByAll", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserByAllAsync() {
            this.GetUserByAllAsync(null);
        }
        
        /// <remarks/>
        public void GetUserByAllAsync(object userState) {
            if ((this.GetUserByAllOperationCompleted == null)) {
                this.GetUserByAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserByAllOperationCompleted);
            }
            this.InvokeAsync("GetUserByAll", new object[0], this.GetUserByAllOperationCompleted, userState);
        }
        
        private void OnGetUserByAllOperationCompleted(object arg) {
            if ((this.GetUserByAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserByAllCompleted(this, new GetUserByAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetImageCatalog", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetImageCatalog(string imageID) {
            object[] results = this.Invoke("GetImageCatalog", new object[] {
                        imageID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageCatalogAsync(string imageID) {
            this.GetImageCatalogAsync(imageID, null);
        }
        
        /// <remarks/>
        public void GetImageCatalogAsync(string imageID, object userState) {
            if ((this.GetImageCatalogOperationCompleted == null)) {
                this.GetImageCatalogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageCatalogOperationCompleted);
            }
            this.InvokeAsync("GetImageCatalog", new object[] {
                        imageID}, this.GetImageCatalogOperationCompleted, userState);
        }
        
        private void OnGetImageCatalogOperationCompleted(object arg) {
            if ((this.GetImageCatalogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageCatalogCompleted(this, new GetImageCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetLightBoxList", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetLightBoxList(System.Guid userId) {
            object[] results = this.Invoke("GetLightBoxList", new object[] {
                        userId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetLightBoxListAsync(System.Guid userId) {
            this.GetLightBoxListAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetLightBoxListAsync(System.Guid userId, object userState) {
            if ((this.GetLightBoxListOperationCompleted == null)) {
                this.GetLightBoxListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLightBoxListOperationCompleted);
            }
            this.InvokeAsync("GetLightBoxList", new object[] {
                        userId}, this.GetLightBoxListOperationCompleted, userState);
        }
        
        private void OnGetLightBoxListOperationCompleted(object arg) {
            if ((this.GetLightBoxListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLightBoxListCompleted(this, new GetLightBoxListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/DelItemFromLightBox", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DelItemFromLightBox(System.Guid userId, System.Guid itemId) {
            object[] results = this.Invoke("DelItemFromLightBox", new object[] {
                        userId,
                        itemId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DelItemFromLightBoxAsync(System.Guid userId, System.Guid itemId) {
            this.DelItemFromLightBoxAsync(userId, itemId, null);
        }
        
        /// <remarks/>
        public void DelItemFromLightBoxAsync(System.Guid userId, System.Guid itemId, object userState) {
            if ((this.DelItemFromLightBoxOperationCompleted == null)) {
                this.DelItemFromLightBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelItemFromLightBoxOperationCompleted);
            }
            this.InvokeAsync("DelItemFromLightBox", new object[] {
                        userId,
                        itemId}, this.DelItemFromLightBoxOperationCompleted, userState);
        }
        
        private void OnDelItemFromLightBoxOperationCompleted(object arg) {
            if ((this.DelItemFromLightBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelItemFromLightBoxCompleted(this, new DelItemFromLightBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/GetImageStatic", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetImageStatic() {
            object[] results = this.Invoke("GetImageStatic", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetImageStaticAsync() {
            this.GetImageStaticAsync(null);
        }
        
        /// <remarks/>
        public void GetImageStaticAsync(object userState) {
            if ((this.GetImageStaticOperationCompleted == null)) {
                this.GetImageStaticOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImageStaticOperationCompleted);
            }
            this.InvokeAsync("GetImageStatic", new object[0], this.GetImageStaticOperationCompleted, userState);
        }
        
        private void OnGetImageStaticOperationCompleted(object arg) {
            if ((this.GetImageStaticCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImageStaticCompleted(this, new GetImageStaticCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://qjDataAccess.org/Production_Hires_Down_Log", RequestNamespace="http://qjDataAccess.org/", ResponseNamespace="http://qjDataAccess.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Production_Hires_Down_Log(string filaName, string fileType, string username, string usage, string enduser, string folder, bool Errflag) {
            this.Invoke("Production_Hires_Down_Log", new object[] {
                        filaName,
                        fileType,
                        username,
                        usage,
                        enduser,
                        folder,
                        Errflag});
        }
        
        /// <remarks/>
        public void Production_Hires_Down_LogAsync(string filaName, string fileType, string username, string usage, string enduser, string folder, bool Errflag) {
            this.Production_Hires_Down_LogAsync(filaName, fileType, username, usage, enduser, folder, Errflag, null);
        }
        
        /// <remarks/>
        public void Production_Hires_Down_LogAsync(string filaName, string fileType, string username, string usage, string enduser, string folder, bool Errflag, object userState) {
            if ((this.Production_Hires_Down_LogOperationCompleted == null)) {
                this.Production_Hires_Down_LogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProduction_Hires_Down_LogOperationCompleted);
            }
            this.InvokeAsync("Production_Hires_Down_Log", new object[] {
                        filaName,
                        fileType,
                        username,
                        usage,
                        enduser,
                        folder,
                        Errflag}, this.Production_Hires_Down_LogOperationCompleted, userState);
        }
        
        private void OnProduction_Hires_Down_LogOperationCompleted(object arg) {
            if ((this.Production_Hires_Down_LogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Production_Hires_Down_LogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PutImageFromClientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddImageStorageCompletedEventHandler(object sender, AddImageStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImageStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddImageStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateImageStorageCompletedEventHandler(object sender, UpdateImageStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateImageStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateImageStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAttachCompletedEventHandler(object sender, AddAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteAttachCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAttachListCompletedEventHandler(object sender, GetAttachListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteImageStorageCompletedEventHandler(object sender, DeleteImageStorageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteImageStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteImageStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddImageToCatalogCompletedEventHandler(object sender, AddImageToCatalogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImageToCatalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddImageToCatalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetImageByAuthAndNumCompletedEventHandler(object sender, GetImageByAuthAndNumCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageByAuthAndNumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageByAuthAndNumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetImageInfoByAuthAndIdCompletedEventHandler(object sender, GetImageInfoByAuthAndIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageInfoByAuthAndIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageInfoByAuthAndIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetImageInfoByIdCompletedEventHandler(object sender, GetImageInfoByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageInfoByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageInfoByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteDownMessageCompletedEventHandler(object sender, DeleteDownMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDownMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDownMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDownLoadMessageCompletedEventHandler(object sender, GetDownLoadMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownLoadMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDownLoadMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDownloadMessageByLoginNameCompletedEventHandler(object sender, GetDownloadMessageByLoginNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownloadMessageByLoginNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDownloadMessageByLoginNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserByAllCompletedEventHandler(object sender, GetUserByAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserByAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserByAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetImageCatalogCompletedEventHandler(object sender, GetImageCatalogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageCatalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageCatalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLightBoxListCompletedEventHandler(object sender, GetLightBoxListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLightBoxListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLightBoxListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DelItemFromLightBoxCompletedEventHandler(object sender, DelItemFromLightBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelItemFromLightBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelItemFromLightBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetImageStaticCompletedEventHandler(object sender, GetImageStaticCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImageStaticCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImageStaticCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Production_Hires_Down_LogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591